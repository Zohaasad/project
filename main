#include<iostream>
#include"String.h"
#include<"myvetor.h"
class logger{
    public:
    static logger & getInstance(){
        static logger instance;
        return instance;
    }
    void initialize(const String & filename ){
        if(log_file_.is_open()){
            cout<<"logger is already initialized "<<endl;
            return ;
        }
        log_file_.open(filename.c_str(),ios::out );
        if(!log_file_){
            cout<<"failed to open "<<filename<<endl;
            exit(EXIT_FAILURE);
        }
    }
    void cleanup(){
        if(log_file_.is_open()){
            log_file_.close();
        }
    }
    void writeerror(const String & error_message){
        if(!log_file_.is_open()){
            cout<<"logger is not initialized"<<endl;
           exit(EXIT_FAILURE);
        }
        time_t now =time(nullptr);
        tm* local_time=localtime(&now);
        char timestamp[20];
        strftime(timestamp,sizeof(timestamp),"%Y-%m-%d %H:%M:%S",local_time);
        
        log_file_<<"["<<timestamp<<"] error" <<error_message<<endl;
    }
    

    logger (const logger &)=delete;
    logger &operator=(const logger &)=delete;
     
private:
logger(){}
~logger(){}
ofstream log_file_;
};

class Card{
    protected:
    bool matched;
    public:
    Card():matched(false){}
    virtual ~Card(){}
    virtual String getsymbol() const=0;
    bool ismatched()const {
        return matched;
        
    }
    void setmatched(bool m ){
        matched=m;
    }
    virtual void display()const =0;
    
};
class simplecard: public Card{
    char symbol ;
    public:
    simplecard():symbol(' '){}
    
    simplecard(char s): symbol(s){}
    String getsymbol()const override{
        return String (&symbol);
    }
    void display()const override{
        cout<<symbol;
    }
};
class hardcard: public Card{
    String symbol;
    public:
    hardcard():symbol(" "){}
    hardcard(const String &s):symbol(s){}
    String getsymbol()const override{
        return symbol;
        
    }
    void display()const override {
        cout<<symbol;
    }
    
};
class Board {
    private:
    static Board* instance;
    static const int size=16;
    bool hardmode;
    simplecard sc[16];
    hardcard hc[16];
    Card * card[16];
    Board(): hardmode(false){}
    public:
    static Board *getinstance(){
        static Board instance;
        return &instance;
    }
    void sethardmode(bool hm){
        hardmode=hm;
    }
   
     void show(const myvector<bool>&revealed){
        try{
            cout<<"\nboard:\n";
            for(int i=0;i<size;i++){
                if(i%4==0)
                cout<<"\n";
                if(card[i]->ismatched()){card[i]->display();
                    cout<<" ";
                }
                else if(revealed[i]){card[i]->display();
                cout<<" ";}
                else 
                if(hardmode){
                    cout<<"****";
                }
                else cout<<"*";
            }
            cout<<"\n";
        }
        catch(const char *msg){
            logger::getInstance().writeerror(String ("exception in show ")+msg);
        }
    }
    int getsize()const {
       return size;
   }
   bool ishardmode()const {
       return hardmode;
   }
void showall(){
       try {
           cout<<"\n board previous state :\n";
           for(int i=0;i<size;i++){
               if(i%4==0)
               cout<<"\n";
               cout<<"["<<i<<"]";
               if(card[i]->ismatched()){
                   card[i]->display();
                   cout<<" ";
               }
               else 
               if(hardmode){
               cout<<"****";
                   
               }
               else cout<<"*";
           }
           cout<<"\n";
       }
       catch(const char*msg){
           logger::getInstance().writeerror(String("exception in show all: ")+msg);
           
       }
   }
   Card *getcard (int index){
       return card[index];
   }
   void setmatched(int i ,int j){
       try {
           card[i]->setmatched(true);
           card[j]->setmatched(true);
           
       }
       catch(const char *msg){
           logger::getInstance().writeerror(String("exception in set matched:")+msg);
           
       }
   }
    
    
};
Board *Board::instance=nullptr;
class player {
    protected:
    String name;
    int score;
    public:
    player (String n):name(n),score(0){}
    virtual~player(){}
    String getname()const {
        return name;
    }
    int getscore()const{
        return score;
    }
    void addscore(){
        score++;
    }
    virtual pair<int,int>pick(const myvector<bool>&revealed)=0; 
    
};
//we use pair because we have to return 2 position on board at same time to show if both the cards are same or different 


int main (){
return 0 ;
}
