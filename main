#include<iostream>
#include"String.h"
#include<"myvetor.h"
class Card{
    protected:
    bool matched;
    public:
    Card():matched(false){}
    virtual ~Card(){}
    virtual String getsymbol() const=0;
    bool ismatched()const {
        return matched;
        
    }
    void setmatched(bool m ){
        matched=m;
    }
    virtual void display()const =0;
    
};
class simplecard: public Card{
    char symbol ;
    public:
    simplecard():symbol(' '){}
    
    simplecard(char s): symbol(s){}
    String getsymbol()const override{
        return String (&symbol);
    }
    void display()const override{
        cout<<symbol;
    }
};
class hardcard: public Card{
    String symbol;
    public:
    hardcard():symbol(" "){}
    hardcard(const String &s):symbol(s){}
    String getsymbol()const override{
        return symbol;
        
    }
    void display()const override {
        cout<<symbol;
    }
    
};
class player {
    protected:
    String name;
    int score;
    public:
    player (String n):name(n),score(0){}
    virtual~player(){}
    String getname()const {
        return name;
    }
    int getscore()const{
        return score;
    }
    void addscore(){
        score++;
    }
    virtual pair<int,int>pick(const myvector<bool>&revealed)=0; 
    
};
//we use pair because we have to return 2 position on board at same time to show if both the cards are same or different 


int main (){
return 0 ;
}
